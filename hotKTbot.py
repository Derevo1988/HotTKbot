import os
import json
import time
import random
import logging
from datetime import datetime, timedelta
import requests
from bs4 import BeautifulSoup
import schedule
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler

# === –ó–ê–ì–†–£–ó–ö–ê .env ===
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
if not CHAT_ID:
    raise ValueError("CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω!")

try:
    CHAT_ID = int(CHAT_ID)
except ValueError:
    raise ValueError("CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# URL: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 12 –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (m12) –∑–∞ 2025 –≥–æ–¥
URL = 'https://www.kino-teatr.ru/mourn/y2025/m12/'
STATE_FILE = 'last_obits.json'

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class NoTokenFilter(logging.Filter):
    def filter(self, record):
        msg = record.getMessage()
        if "bot" in msg and ":" in msg:
            parts = msg.split(":", 1)
            if len(parts) > 1 and len(parts[1].strip()) > 10:
                record.msg = msg.replace(parts[1].strip(), "HIDDEN_TOKEN")
        return True

logging.getLogger().addFilter(NoTokenFilter())
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
stats = {
    "checks_last_hour": 0,
    "last_check": None,
    "start_time": datetime.now()
}

# –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
def reset_hourly():
    stats["checks_last_hour"] = 0
    logger.info("–°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ —á–∞—Å.")

schedule.every().hour.do(reset_hourly)

# === –°–û–°–¢–û–Ø–ù–ò–ï ===
last_obits = []

def load_state():
    global last_obits
    try:
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            last_obits = data
            return data
    except FileNotFoundError:
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        return last_obits

def save_state(obits):
    global last_obits
    last_obits = obits
    try:
        with open(STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(obits, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.warning(f"–ù–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å: {e}")

def is_recent(death_date_str):
    try:
        months_ru = {
            '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4, '–º–∞—è': 5, '–∏—é–Ω—è': 6,
            '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8, '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
        }
        if ' - ' in death_date_str:
            death_date_str = death_date_str.split(' - ')[-1].strip()
        parts = death_date_str.split()
        if len(parts) >= 3:
            day = int(parts[0])
            month_name = parts[1].lower()
            year = int(parts[2])
            month = months_ru.get(month_name, 10)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–∫—Ç—è–±—Ä—å
            death_date = datetime(year, month, day)
            return death_date >= datetime.now() - timedelta(hours=24)
    except:
        return False
    return False

def parse_obits():
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
    try:
        response = requests.get(URL, headers=headers, timeout=15)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        obits = []
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: –∏—â–µ–º –±–ª–æ–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ (h3/strong) –∏ –¥–∞—Ç–∞–º–∏ (' - ')
        entries = soup.find_all(['h3', 'strong', 'div'], class_=['mourning-entry', 'entry']) or soup.find_all(string=lambda t: t and ' - ' in str(t))
        for entry in entries:
            text = entry.get_text(strip=True) if entry.name else str(entry).strip()
            if len(text) < 15 or ' - ' not in text:
                continue
            parts = text.split(' - ', 1)
            name = parts[0].strip()
            dates = parts[1].strip()
            text_lower = text.lower()
            # –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç—ã –∞–∫—Ç–µ—Ä–æ–≤/–∞—Ä—Ç–∏—Å—Ç–æ–≤
            if any(kw in text_lower for kw in ['–∞–∫—Ç–µ—Ä', '–∞—Ä—Ç–∏—Å—Ç', '—Ä–µ–∂–∏—Å—Å—ë—Ä', '—Ç–µ–∞—Ç—Ä', '–≥–∏–º–Ω–∞—Å—Ç', '—Å–ø–æ—Ä—Ç']):
                obits.append({'name': name, 'date': dates})

        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è + —Å–≤–µ–∂–∏–µ
        seen = set()
        unique = []
        for obit in obits:
            key = f"{obit['name']} {obit['date']}"
            if key not in seen and is_recent(obit['date']):
                seen.add(key)
                unique.append(obit)

        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 12 (m12): –Ω–∞–π–¥–µ–Ω–æ {len(unique)} —Å–≤–µ–∂–∏—Ö –∞–Ω–∫–µ—Ç.")
        return unique
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 12 (m12): {e}")
        return []

# === –ö–û–ú–ê–ù–î–´ ===
async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now().strftime("%H:%M:%S")
    await update.message.reply_text(f"Pong! –ë–æ—Ç –∂–∏–≤.\n–í—Ä–µ–º—è: {now}")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total_obits = len(last_obits)
    last_check = stats["last_check"] or "–µ—â—ë –Ω–µ –±—ã–ª–æ"
    checks = stats["checks_last_hour"]

    # –†–∞—Å—á—ë—Ç uptime
    delta = datetime.now() - stats["start_time"]
    hours, remainder = divmod(int(delta.total_seconds()), 3600)
    minutes, _ = divmod(remainder, 60)
    uptime = f"{hours}—á {minutes}–º"

    message = f"<b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
    message += f"‚Ä¢ –í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç –≤ –±–∞–∑–µ: <b>{total_obits}</b>\n"
    message += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ —á–∞—Å: <b>{checks}</b>\n"
    message += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: <b>{last_check}</b>\n"
    message += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <b>{uptime}</b>\n"
    message += f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç: <a href='{URL}'>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 12 (m12)</a>"

    await update.message.reply_text(message, parse_mode='HTML', disable_web_page_preview=True)

# === –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô ===
async def check_updates(context: ContextTypes.DEFAULT_TYPE):
    stats["checks_last_hour"] += 1
    stats["last_check"] = datetime.now().strftime("%H:%M:%S")

    current_obits = parse_obits()
    if not current_obits:
        return

    last_keys = {f"{o['name']} {o['date']}" for o in last_obits}
    new_obits = [o for o in current_obits if f"{o['name']} {o['date']}" not in last_keys]

    if new_obits:
        message = "ü™¶ <b>–ù–æ–≤—ã–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 12:</b>\n\n"
        for obit in new_obits:
            message += f"‚Ä¢ <b>{obit['name']}</b>\n  {obit['date']}\n\n"
        message += f"<a href='{URL}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ</a>"

        try:
            await context.bot.send_message(
                chat_id=CHAT_ID,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {len(new_obits)} –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç –Ω–∞ —Å—Ç—Ä. 12.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

        save_state(last_obits + new_obits)
    else:
        logger.info("–ù–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 12 –Ω–µ—Ç.")

# === –§–ï–ô–ö–û–í–´–ô –°–ï–†–í–ï–† –î–õ–Ø RENDER ===
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Bot is alive! Monitoring page 12 (m12) obituaries.')

def run_server():
    port = int(os.getenv('PORT', 10000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    logger.info(f"–§–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

threading.Thread(target=run_server, daemon=True).start()

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
def main():
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É 12 (m12): {URL}")
    load_state()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    app = Application.builder().token(BOT_TOKEN).concurrent_updates(True).build()
    app.add_handler(CommandHandler("ping", ping_command))
    app.add_handler(CommandHandler("status", status_command))

    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    app.job_queue.run_repeating(
        callback=check_updates,
        interval=random.randint(55, 65),
        first=10
    )

    # –ó–∞–ø—É—Å–∫ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    app.job_queue.run_repeating(
        callback=lambda ctx: schedule.run_pending(),
        interval=60,
        first=0
    )

    app.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
